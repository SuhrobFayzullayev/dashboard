import {
  require_react
} from "./chunk-4ROKLF6C.js";
import {
  __toESM
} from "./chunk-62VDRKYJ.js";

// node_modules/react-donut-chart/dist/DonutChart.js
var import_react3 = __toESM(require_react());

// node_modules/react-donut-chart/dist/ArcPath.js
var import_react = __toESM(require_react());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function coordinates(half, radius, startAngle, endAngle) {
  const startAngleDegrees = Math.PI * startAngle / 180;
  const endAngleDegrees = Math.PI * endAngle / 180;
  return { x1: half + half * radius * Math.cos(startAngleDegrees), y1: half + half * radius * Math.sin(startAngleDegrees), x2: half + half * radius * Math.cos(endAngleDegrees), y2: half + half * radius * Math.sin(endAngleDegrees) };
}
function arc(width, radius, largeArcFlag, x, y) {
  const z = width / 2 * radius;
  return `A${z}, ${z} 0 ${largeArcFlag} ${x}, ${y}`;
}
function path(activeAngle, startAngle, width, innerRadius, outerRadius) {
  const endAngle = startAngle + activeAngle;
  const largeArcFlagOuter = activeAngle > 180 ? "1 1" : "0 1";
  const largeArcFlagInner = activeAngle > 180 ? "1 0" : "0 0";
  const half = width / 2;
  const outerCoords = coordinates(half, outerRadius, startAngle, endAngle);
  const innerCoords = coordinates(half, innerRadius, startAngle, endAngle);
  const outerArc = arc(width, outerRadius, largeArcFlagOuter, outerCoords.x2, outerCoords.y2);
  const innerArc = arc(width, innerRadius, largeArcFlagInner, innerCoords.x1, innerCoords.y1);
  return `M${outerCoords.x1},${outerCoords.y1}
  ${outerArc}
  L${innerCoords.x2},${innerCoords.y2}
  ${innerArc} z`;
}
var ArcPath = ({ item }) => {
  const { className, emptyOffset, graphWidth, innerRadius, outerRadius, selected, selectedOffset, toggledOffset, toggleSelect, total } = (0, import_react.useContext)(DonutChartContext);
  const { angle, classNames, clickHandlers, index, isEmpty, label, value, ...restItemRenderrops } = item;
  const activeAngle = Number.isNaN(value / total) || total / value === 1 ? 359.99 : value / total * 360;
  let [inner, outer] = [innerRadius, outerRadius];
  if (isEmpty) {
    inner += emptyOffset;
    outer -= emptyOffset;
  } else if ((selected === null || selected === void 0 ? void 0 : selected.label) === label) {
    if (toggleSelect) {
      inner -= toggledOffset;
      outer += toggledOffset;
    } else {
      outer += selectedOffset;
    }
  }
  return import_react.default.createElement("path", _extends({}, clickHandlers, restItemRenderrops, { className: `${className}-arcs-path ${classNames}`, d: path(activeAngle, angle, graphWidth, inner, outer) }));
};
var ArcPath_default = ArcPath;

// node_modules/react-donut-chart/dist/LegendItem.js
var import_react2 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var LegendItem = ({ item }) => {
  const { className, graphWidth, width } = (0, import_react2.useContext)(DonutChartContext);
  const { classNames, clickHandlers, index, isEmpty, label, value, ...restItemRenderProps } = item;
  const classSuffix = "legend-item";
  const legendWidth = width - graphWidth;
  const sqUnit = legendWidth / 10;
  const yOffset = 1.5;
  return import_react2.default.createElement("g", _extends2({}, clickHandlers, { className: `${className}-${classSuffix} ${classNames}`, transform: `translate(${width - legendWidth}, ${index * yOffset * sqUnit})` }), import_react2.default.createElement("rect", _extends2({}, restItemRenderProps, { height: sqUnit, width: sqUnit })), import_react2.default.createElement("text", { className: `${className}-${classSuffix}-label ${classNames}`, dy: ".35em", x: sqUnit + sqUnit / 2, y: sqUnit / 2 }, `${label} - ${value}`));
};
var LegendItem_default = LegendItem;

// node_modules/react-donut-chart/dist/DonutChart.js
var DonutChartContext = (0, import_react3.createContext)(void 0);
var DonutChart = ({ className = "donutchart", clickToggle = true, colorFunction = (colors2, index) => colors2[index % colors2.length], colors = ["#f44336", "#e91e63", "#9c27b0", "#673ab7", "#3f51b5", "#2196f3", "#03a9f4", "#00bcd4", "#009688", "#4caf50", "#8bc34a", "#cddc39", "#ffeb3b", "#ffc107", "#ff9800", "#ff5722", "#795548", "#607d8b"], data = [{ className: "", label: "", value: 100, isEmpty: true }], emptyColor = "#e0e0e0", emptyOffset = 0.08, formatValues = (value, total) => Number.isNaN(value / total) ? "--" : `${(value / total * 100).toFixed(2)}%`, height = 500, interactive = true, innerRadius = 0.7, legend = true, onMouseEnter = (item) => item, onMouseLeave = (item) => item, onClick = (item, toggled) => toggled ? item : null, outerRadius = 0.9, selectedOffset = 0.03, strokeColor = "#212121", toggledOffset = 0.04, width = 750 }) => {
  const [selected, setSelected] = (0, import_react3.useState)(interactive ? data[0] : null);
  const [toggleSelect, setToggleSelect] = (0, import_react3.useState)(false);
  (0, import_react3.useEffect)(() => {
    if (interactive) {
      setSelected(data[0]);
      setToggleSelect(false);
    }
  }, [interactive, data]);
  const graphWidth = legend ? width * (2 / 3) : width;
  const total = data.reduce((sum, { value }) => sum + value, 0);
  const { dataWithRenderProps } = data.reduce(({ angle, dataWithRenderProps: dataWithRenderProps2 }, item, index) => {
    const { className: className2, isEmpty, label, value } = item;
    const isSelected = (selected === null || selected === void 0 ? void 0 : selected.label) === label;
    const isToggled = isSelected && toggleSelect;
    return { angle: angle + value / total * 360, dataWithRenderProps: [...dataWithRenderProps2, { angle, index, ...item, classNames: `${className2 != null ? className2 : ""} ${isEmpty ? "empty" : ""} ${isSelected ? "selected" : ""} ${isToggled ? "toggled" : ""}`.trim(), fill: isEmpty ? emptyColor : colorFunction(colors, index), opacity: isSelected && !toggleSelect ? 0.5 : 1, stroke: isEmpty ? emptyColor : strokeColor, clickHandlers: interactive ? { onClick: () => {
      if ((selected === null || selected === void 0 ? void 0 : selected.label) === label) {
        const toggle = clickToggle ? !toggleSelect : false;
        setSelected(item);
        setToggleSelect(toggle);
        onClick(item, toggle);
      }
    }, onMouseEnter: () => {
      if (!toggleSelect) {
        setSelected(item);
        onMouseEnter(item);
      }
    }, onMouseLeave: () => {
      if (!toggleSelect) {
        onMouseLeave(item);
      }
    } } : void 0 }], total: total + value };
  }, { angle: 0, dataWithRenderProps: [] });
  return import_react3.default.createElement(DonutChartContext.Provider, { value: { className, emptyOffset, graphWidth, innerRadius, outerRadius, selected, selectedOffset, toggledOffset, toggleSelect, total, width } }, import_react3.default.createElement("svg", { className, style: { height, width }, viewBox: `0 0 ${width} ${height}` }, import_react3.default.createElement("g", { className: `${className}-arcs` }, dataWithRenderProps.map((item) => import_react3.default.createElement(ArcPath_default, { item, key: `arcpath${item.index}` }))), selected && import_react3.default.createElement("g", { className: `${className}-innertext` }, import_react3.default.createElement("text", { className: `${className}-innertext-label`, x: graphWidth / 2, y: "45%", textAnchor: "middle" }, selected.label), import_react3.default.createElement("text", { className: `${className}-innertext-value`, x: graphWidth / 2, y: "60%", textAnchor: "middle" }, formatValues(selected.value, total))), legend && import_react3.default.createElement("g", { className: `${className}-legend` }, dataWithRenderProps.map((item) => import_react3.default.createElement(LegendItem_default, { key: `legenditem${item.index}`, item })))));
};
var DonutChart_default = DonutChart;

// node_modules/react-donut-chart/dist/index.js
var dist_default = DonutChart_default;
export {
  dist_default as default
};
//# sourceMappingURL=react-donut-chart.js.map
